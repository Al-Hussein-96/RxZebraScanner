plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'maven-publish'
    id 'signing'
}

android {
    namespace 'com.alhussain.rxzebrascanner'
    compileSdk 33

    defaultConfig {
        minSdk 21
        targetSdk 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    testFixtures {
        enable = true
    }
}

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    // Read local.properties file first if it exists
    Properties p = new Properties()
    new FileInputStream(secretPropsFile).withCloseable { is -> p.load(is) }
    p.each { name, value -> ext[name] = value }
} else {
    // Use system environment variables
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
    ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.key"] = System.getenv('SIGNING_KEY')
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId = 'com.github.Al-Hussein-96'
                artifactId = 'rxzebrascanner'
                version = '1.0'

                afterEvaluate {
                    from components.release
                }


                pom {
                    name = 'RxZebraScanner'
                    description = 'Integrate EMDK zebra scanner with reactive programming (RxJava).'
                    url = 'https://github.com/Al-Hussein-96/RxZebraScanner'
                    signing {
                        sign publishing.publications.release
//                        sign configurations.archives
                    }
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'Al-Hussein-96'
                            name = 'Mohammad AlHussain'
                            email = 'm.alhussein.96@gmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:github.com/Al-Hussein-96/RxZebraScanner.git'
                        developerConnection = 'scm:git:ssh://github.com/Al-Hussein-96/RxZebraScanner.git'
                        url = 'https://github.com/Al-Hussein-96/RxZebraScanner'
                    }
                    withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')

                        project.configurations.implementation.allDependencies.each {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }

            }
        }
    }

//    nexusPublishing {
//        repositories {
//            sonatype {
//                stagingProfileId = System.getenv('sonatypeStagingProfileId')
//                username = System.getenv('OSSRH_USERNAME')
//                password = System.getenv('OSSRH_PASSWORD')
//            }
//        }
//    }

}


dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.7.0'


    implementation 'com.symbol:emdk:9.1.1'

    implementation 'com.jakewharton.timber:timber:5.0.1'

    implementation 'io.reactivex.rxjava2:rxjava:2.2.8'




    // hilt
    implementation "com.google.dagger:hilt-android:2.40.5"
    kapt "com.google.dagger:hilt-compiler:2.40.5"


    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'
}